openapi: 3.0.0
info:
  version: '1.1'
  title: "TheCameron"
  description: TheCameron is an API that allows users to view and write articles, post reactions to them and follow and stay updated on the various authors
  license:
    name: MIT
servers:
  - url: http://localhost:3000/api/v1
    description: Localhost
    
paths:
  /user:
    post:
      description: >-
        Create a new user.
      summary: New user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: "Created new user."
          headers:
            'Location':
              schema:
                type: string
                description: Link to the new user.
        '400':
          description: "Error."
        '403':
          description: "Username already exist."
          
  /user/{username}:
    get:
      description: >-
        Get the info about user.
      summary: Get specific user
      parameters:
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '200':
          description: 'Info user.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Error.'
        '404':
          description: 'Error. The username does not exist.'     
          
  /user/{username}/subscription:
    post:
      description: >-
        Create a new subscription.
      summary: New subscription.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - username
                - dateSubscription
              properties:
                username:
                  type: string
                  description: "Username"
                dateSubscription:
                  type: date
                  description: "Date Subscription"
      responses:
        '201':
          description: "Created new subscription."
          headers:
            'Location':
              schema:
                type: string
                description: Link to the new subscription.
        '400':
          description: "Error."
        '403':
          description: "Error. Subscription already exist."
    get:
      description: >-
        Get the date of subscription about user.
      summary: Get date payment
      parameters:
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '200':
          description: 'Date payment.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: 'Error.'
        '404':
          description: 'Error. The username does not exist.'
    delete:
      description: >-
        Delete subscription.
      summary: Delete date payment
      parameters:
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '204':
          description: 'Delete payment.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '404':
          description: 'Error. The username does not exist.'
          
  /login:
    post:
      description: >-
        Autenticate an user.
      summary: Authentication.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: "Username"
                email:
                  type: string
                  description: "password"
      responses:
        '200':
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRes'
        '403':
          description: "failure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRes'
        '400':
          description: "missing parameter"
          
  /article:
    post:
      description: >-
        Create an article.
      summary: Creation of an article.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '403':
          description: "failure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: "missing parameter"
  /article/{id}/{author}:
    get:
      description: >-
        Get article.
      summary: Get article
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
      responses:
        '200':
          description: 'Article.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: 'Error.'
        '404':
          description: 'Error. The author or id does not exist.'
  /article/{id}/{author}/user/{username}/canAccess:
    get:
      description: >-
        Tells if the article is restricted or not.
      summary:  Tells if the article is restricted
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '204':
          description: 'user can read'
        '403':
          description: 'user cannot read'
        '404':
          description: 'Error. The author or id or user does not exist.'
  /article/filters?:
    get:
      description: >-
        Get articles filtered.
      summary: Filter articles
      parameters:
        - in: query
          name: filters
          schema:
            type: array
            description: "The filters to applay"
      responses:
        '200':
          description: 'Filtered articles.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleInfo'
  /article/search/{title}:
    get:
      description: >-
        Get articles matching given title
      summary: Search by title
      parameters:
        - in: path
          name: title
          schema:
            type: object
            description: "Title to match"
      responses:
        '200':
          description: 'Title-matching articles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleInfo'
  /article/search/:
    get:
      description: >-
        Get last 50 articles (if more)
      summary: Get recent articles
      responses:
        '200':
          description: 'Recent articles'
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleInfo'
  /reaction:
    post:
      description: >-
        Create a reaction.
      summary: Creation of a reaction.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
      responses:
        '200':
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
        '403':
          description: "failure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
        '400':
          description: "missing parameter"
    
  /reaction/{id}/{author}:
    get:
      description: >-
        Get reaction about an article .
      summary: Filter reaction
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
      responses:
        '200':
          description: 'Filtered reaction.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reaction'
  /reaction/{username}:
    get:
      description: >-
        Get reaction about an user .
      summary: Filter reaction
      parameters:
        - in: path
          name: username
          schema:
            type: string
            required: true
            description: 'user of the reaction.'
      responses:
        '200':
          description: 'Filtered reaction.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reaction'
  /follow:
    post:
      description: >-
        Add a target in the follow list of a user.
      summary: Follow a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '204':
          description: "success"
        '400':
          description: "missing parameter"
  /unfollow:
    post:
      description: >-
        Remove a target in the follow list of a user.
      summary: Unollow a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '204':
          description: "success"
        '400':
          description: "missing parameter"
        '404':
          description: "already not following"
  /{username}/following:
    get:
      description: >-
        Get the list of followed users [targets] by the given one
      summary: Get Following.
      parameters:
        - in: path
          name: username
          schema:
            type: object
            description: "username of the user"
      responses:
        '200':
          description: 'Followed users'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: 'no results'
  /{username}/followers:
    get:
      description: >-
        Get the list of users that follow the given one
      summary: Get followers.
      parameters:
        - in: path
          name: username
          schema:
            type: object
            description: "username of the user"
      responses:
        '200':
          description: 'Following users'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: 'no results'

components:
  schemas:
    User:
      type: object
      required:
        - name
        - surname
        - username
        - email
        - password
      properties:
        name:
          type: string
          description: "Name of the user"
        surname:
          type: string
          description: "Surname of the user"
        username:
          type: string
          description: "Username, user key"
        email:
          type: string
          description: "The email of the user"
        password:
          type: string
          description: "Password fof authentication"
    LoginRes:
      type: object
      required:
        - success
        - message
        - token
      properties:
        success:
          type: boolean
          description: "tell if the authentication was successful"
        message:
          type: string
          descritpion: "description of the success or failure"
        token:
          type: string
          description: "the token for the session"
    Subscription:
      type: object
      required:
        - dateSubsription
      properties:
        dateSubscription:
          type: date
          description: 'Date start the subscription.'
    Article:
      type: object
      required:
        - id
        - author
        - title
        - summary
        - text
        - date
        - tag
        - restricted
      properties:
        id:
          type: number
          description: 'Id of the article.'
        author:
          type: string
          description: 'Author of the article.'
        title:
          type: string
          description: 'Title of the article.'
        summary:
          type: string
          description: 'Summary of the article.'
        text:
          type: string
          description: 'Text of the article.'
        date:
          type: date
          description: 'Date when the article was written.'
        tag:
          type: [string]
          description: 'Tag to describe the article'
        restricted:
          type: boolean
          description: 'Tells if the article can be read by everyone or not'
    ArticleInfo:
      type: object
      required:
        - id
        - author
        - title
      properties:
        id:
          type: number
        author:
          type: string
        title:
          type: string
    Reaction:
      type: object
      required:
        - username
        - author
        - id
        - reaction
      properties:
        username:
          type: string
        author:
          type: string
        id:
          type: number
        reaction:
          type: number
    Follow:
      type: object
      required:
        - user
        - target
      properties:
        user:
          type: string
          description: 'username of the user that follows'
        target:
          type: [string]
          description: 'usernames of followed users'