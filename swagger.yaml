openapi: 3.0.0
info:
  version: '3.0'
  title: "TheCameron"
  description: TheCameron is an API that allows users to view and write articles, post reactions to them and follow and stay updated on the various authors
  license:
    name: MIT
servers:
  - url: http://localhost:3000/api/v1
    description: Localhost
    
paths:
  /user:
    post:
      description: >-
        Create a new user.
      summary: New user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: "Created new user."
          headers:
            'Location':
              schema:
                type: string
                description: Link to the new user.
        '400':
          description: "Error. Miss params."
        '403':
          description: "Error. Username already exist."
  /user/{username}:
    get:
      description: >-
        Get info about user.
      summary: Get specific user
      parameters:
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '200':
          description: 'Info user.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: 'Error. Username does not exist.'     
  /user/{username}/subscription:
    post:
      description: >-
        Create a new subscription.
      summary: New subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '201':
          description: "Created new subscription."
          headers:
            'Location':
              schema:
                type: string
                description: Link to the new subscription.
        '400':
          description: "Error. Miss params."
        '404':
          description: "Error. Subscription already exist or user does not exist."
    get:
      description: >-
        Get the date of subscription about user.
      summary: Get date payment
      parameters:
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '200':
          description: 'Date payment.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '404':
          description: 'Error. Username or subscription does not exist.'
    delete:
      description: >-
        Delete date payment and subscription..
      summary: Delete subscription
      parameters:
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '204':
          description: 'Delete subscription.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: 'Error. Username or subscription does not exist.'
        '404':
          description: 'Error. Failure.'
          
  /login:
    post:
      description: >-
        Autenticate an user.
      summary: Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: "Username."
                email:
                  type: string
                  description: "Password."
      responses:
        '200':
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRes'
        '403':
          description: "Error. Failed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRes'
        '400':
          description: "Error. Miss params."
          
  /article:
    post:
      description: >-
        Create new article.
      summary: Creation an article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: "Error. Missing parameter."
  /article/{author}:
    get:
      description: >-
        Get list of article.
      summary: Get list of article
      parameters:
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of articles.'
      responses:
        '200':
          description: 'List of articles.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '404':
          description: 'Error. Author does not exist.'
  /article/{id}/{author}:
    get:
      description: >-
        Get specific article.
      summary: Get article
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
      responses:
        '200':
          description: 'Article.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '404':
          description: 'Error. The author or id does not exist.'
          
  
  /article/filters?:
    get:
      description: >-
        Get articles filtered.
      summary: Filter articles
      parameters:
        - in: query
          name: filters
          schema:
            type: array
            description: "The filters to applay."
      responses:
        '201':
          description: 'Filtered articles.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleInfo'
  /article/search/{title}:
    get:
      description: >-
        Get articles matching given title
      summary: Search by title
      parameters:
        - in: path
          name: title
          schema:
            type: object
            description: "Title to match"
      responses:
        '200':
          description: 'Title-matching articles'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleInfo'
  /article/search/:
    get:
      description: >-
        Get last 50 articles (if more)
      summary: Get recent articles
      responses:
        '200':
          description: 'Recent articles'
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleInfo'
                  
  /resticted/article/{id}/{author}/user/{username}:
    get:
      description: >-
        Tells if the article is restricted or not.
      summary:  Tells if the article is restricted
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
        - in: path
          name: username
          schema:
            type: object
            required: true
            description: 'Username of the user.'
      responses:
        '204':
          description: 'User can read.'
        '400':
          description: 'Error. Missing params.'
        '403':
          description: 'Error. User can not read.'
        '404':
          description: 'Error. Author or id or user does not exist.'
  /resticted/article/{id}/{author}:
    get:
      description: >-
        Tells if the article is restricted or not and the user is not logged.
      summary:  Tells if the article is restricted
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
      responses:
        '204':
          description: 'User can read.'
        '400':
          description: 'Error. Missing params.'
        '403':
          description: 'Error. User can not read.'
        '404':
          description: 'Error. Author or id or user does not exist.'        
  /reaction:
    post:
      description: >-
        Create a reaction.
      summary: Creation of a reaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
      responses:
        '201':
          description: "success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
        '400':
          description: "Error. Missing parameter."
        '403':
          description: "Error. Reaction already exist."
        '404':
          description: 'Error. Article or user does not exist.'
  /reaction/{id}/{author}:
    get:
      description: >-
        Get reaction about an article .
      summary: Filter reaction
      parameters:
        - in: path
          name: id
          schema:
            type: number
            required: true
            description: 'ID of the article.'
        - in: path
          name: author
          schema:
            type: string
            required: true
            description: 'Author of the article.'
      responses:
        '200':
          description: 'Filtered reaction.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reaction'
        '404':
          description: 'Error. Article or user does not exist.'
  /reaction/{username}:
    get:
      description: >-
        Get reaction about an user.
      summary: Filter reaction
      parameters:
        - in: path
          name: username
          schema:
            type: string
            required: true
            description: 'User of the reaction.'
      responses:
        '200':
          description: 'Filtered reaction.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reaction'
        '404':
          description: 'Error. Reaction or user does not exist.'
                  
  /followers/follow:
    post:
      description: >-
        Add a target in the follow list of a user.
      summary: Follow a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowReq'
      responses:
        '204':
          description: "Success."
        '400':
          description: "Error. Missing parameter or user equal to target."
        '404':
          description: "Error. Invalid user or target."
  /followers/unfollow:
    post:
      description: >-
        Remove a target in the follow list of a user.
      summary: Unfollow a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowReq'
      responses:
        '204':
          description: "Success."
        '400':
          description: "Error. Missing parameter or user equal to target."
        '404':
          description: "Error. Invalid user or target."
  /followers/user/{username}/following:
    get:
      description: >-
        Get the list of followed users [targets] by the given one.
      summary: Get Following
      parameters:
        - in: path
          name: username
          schema:
            type: object
            description: "Username of the user."
      responses:
        '200':
          description: 'Followed users.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowRes'
        '404':
          description: 'Error. No results.'
  /followers/user/{username}/followers:
    get:
      description: >-
        Get the list of users that follow the given one.
      summary: Get followers
      parameters:
        - in: path
          name: username
          schema:
            type: object
            description: "username of the user."
      responses:
        '200':
          description: 'Following users.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowRes'
        '404':
          description: 'Error. No results.'
     
  /tag:     
    get:
      description: >-
        Get the list of the tag.
      summary: Get list of tag
      responses:
        '200':
          description: 'All of tag.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: 'Error. No results.'
  /tag/{name}:
    post:
      description: >-
        Insert new general tag.
      summary: Insert tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: "Success"
        '400':
          description: "Error. Missing parameter."
        '404':
          description: "Error. Invalid parameter."
    get:
      description: >-
        Get information about a tag.
      summary: Get tag
      parameters:
        - in: path
          name: name
          schema:
            type: object
            description: "Name of the tag."
      responses:
        '200':
          description: 'ID of the tag.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: 'Error. No results.'
  /tag/id/{id}:
    get:
      description: >-
        Get information about a tag.
      summary: Get tag
      parameters:
        - in: path
          name: name
          schema:
            type: object
            description: "ID of the tag."
      responses:
        '200':
          description: 'Name of the tag.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: 'Error. No results.'
  /tag/user/{username}:
    post:
      description: >-
        Insert new tag in the preference.
      summary: Choose tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteTag'
      responses:
        '201':
          description: "Success."
        '400':
          description: "Error. Missing parameter or user."
        '404':
          description: "Error. Invalid user."
    get:
      description: >-
        Get the list of the preference tag of users.
      summary: Get preference tag of user
      parameters:
        - in: path
          name: username
          schema:
            type: object
            description: "Username of the user."
      responses:
        '200':
          description: 'Tag.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteTag'
        '404':
          description: 'Error. No results.'
          
  /savedArticle:
    delete:
      description: >-
        Remove saved article.
      summary: Remove saved article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavedArticle'
      responses:
        '204':
          description: 'Remove article.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: 'Error. Article does not exist.'
        '404':
          description: 'Error. Failure.'
  /savedArticle/{username}:
    post:
      description: >-
        Save new article.
      summary: Save article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavedArticle'
      responses:
        '201':
          description: "Success"
        '400':
          description: "Error. Missing parameter."
        '404':
          description: "Error. Invalid parameter."
    get:
      description: >-
        Get list of article.
      summary: Get list of favorite articles
      parameters:
        - in: path
          name: username
          schema:
            type: object
            description: "Name of the user."
      responses:
        '200':
          description: 'List of article.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedArticle'
        '404':
          description: 'Error. No results.'
components:
  schemas:
    User:
      type: object
      required:
        - name
        - surname
        - username
        - email
        - password
      properties:
        name:
          type: string
          description: "Name of the user."
        surname:
          type: string
          description: "Surname of the user."
        username:
          type: string
          description: "Username, user key."
        email:
          type: string
          description: "The email of the user."
        password:
          type: string
          description: "Password for authentication."
    LoginRes:
      type: object
      required:
        - success
        - message
        - token
      properties:
        success:
          type: boolean
          description: "Tell if the authentication was successful."
        message:
          type: string
          descritpion: "Description of the success or failure."
        token:
          type: string
          description: "The token for the session."
    Subscription:
      type: object
      required:
        - username
        - dateSubsription
      properties:
        username:
          type: string
          description: 'Username of subscriber.'
        dateSubscription:
          type: date
          description: 'Date start the subscription.'
    Article:
      type: object
      required:
        - id
        - author
        - title
        - summary
        - text
        - date
        - tag
        - restricted
      properties:
        id:
          type: number
          description: 'Id of the article.'
        author:
          type: string
          description: 'Author of the article.'
        title:
          type: string
          description: 'Title of the article.'
        summary:
          type: string
          description: 'Summary of the article.'
        text:
          type: string
          description: 'Text of the article.'
        date:
          type: date
          description: 'Date when the article was written.'
        tag:
          type: [number]
          description: 'Tag to describe the article.'
        restricted:
          type: boolean
          description: 'Tells if the article can be read by everyone or not.'
    ArticleInfo:
      type: object
      required:
        - id
        - author
        - title
      properties:
        id:
          type: number
          description: 'Id of the article.'
        author:
          type: string
          description: 'Author of the article.'
        title:
          type: string
          description: 'Title of the article.'
    Reaction:
      type: object
      required:
        - username
        - author
        - id
        - reaction
      properties:
        username:
          type: string
          description: 'Username insert rection.'
        author:
          type: string
          description: 'Author of the article.'
        id:
          type: number
          description: 'Id of the article.'
        reaction:
          type: number
          description: 'Reaction from user to article.'
    FollowReq:
      type: object
      required:
        - user
        - target
      properties:
        user:
          type: string
          description: 'Username of the user that follows.'
        target:
          type: string
          description: 'Username of the target user.'
    FollowRes:
      type: object
      required:
        - users
      properties:
        users:
          type: [string]
          description: 'List of requested usernames.'
    FavoriteTag:
      type: object
      required:
        - username
        - id
      properties:
        user:
          type: string
          description: 'Username of the user.'
        id:
          type: [number]
          description: 'ID of the tag.'
    Tag:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
          description: 'ID of the tag.'
        name:
          type: string
          description: 'Name of the tag.'
    SavedArticle:
      type: object
      required:
        - username
        - articles
      properties:
        username:
          type: string
          description: 'Username.'
        articles:
          type: [ {Number; String} ]
          description: 'List of saved article.'